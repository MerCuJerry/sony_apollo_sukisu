From c39f49279dd86b7da4f7c90d302bc4f44718f23c Mon Sep 17 00:00:00 2001
From: derfelot <derfelot.git@gmail.com>
Date: Sun, 23 Apr 2023 02:45:34 +0530
Subject: [PATCH] Tama: Add Sony's carillon NFC driver

---
 drivers/misc/Kconfig                        |   1 +
 drivers/misc/Makefile                       |   2 +
 drivers/misc/carillon/Kconfig               |   5 +
 drivers/misc/carillon/Makefile              |   2 +
 drivers/misc/carillon/bd7602/LICENSE        | 340 ++++++++
 drivers/misc/carillon/bd7602/bd7602.c       | 311 ++++++++
 drivers/misc/carillon/bd7602/bd7602.h       |  18 +
 drivers/misc/carillon/cxd224x/LICENSE       | 340 ++++++++
 drivers/misc/carillon/cxd224x/cxd224x-i2c.c | 843 ++++++++++++++++++++
 drivers/misc/carillon/cxd224x/cxd224x.h     |  47 ++
 drivers/misc/carillon/main_module.c         |  54 ++
 11 files changed, 1963 insertions(+)
 create mode 100644 drivers/misc/carillon/Kconfig
 create mode 100644 drivers/misc/carillon/Makefile
 create mode 100644 drivers/misc/carillon/bd7602/LICENSE
 create mode 100644 drivers/misc/carillon/bd7602/bd7602.c
 create mode 100644 drivers/misc/carillon/bd7602/bd7602.h
 create mode 100644 drivers/misc/carillon/cxd224x/LICENSE
 create mode 100644 drivers/misc/carillon/cxd224x/cxd224x-i2c.c
 create mode 100644 drivers/misc/carillon/cxd224x/cxd224x.h
 create mode 100644 drivers/misc/carillon/main_module.c

diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index d57de08eb786..57a7cd43c041 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -943,6 +943,7 @@ source "drivers/misc/echo/Kconfig"
 source "drivers/misc/cxl/Kconfig"
 source "drivers/misc/fpr_FingerprintCard/Kconfig"
 source "drivers/misc/mm_tuner/Kconfig"
+source "drivers/misc/carillon/Kconfig"
 endmenu
 
 config OKL4_LINK_SHBUF
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index 3f5a5eb206c8..427298a045ae 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -69,6 +69,8 @@ obj-$(CONFIG_VXR200_XR_MISC) += vxr7200.o
 
 obj-$(CONFIG_NFC_PN553_DEVICES) += pn553.o
 
+obj-$(CONFIG_NFC_CARILLON)	+= carillon/
+
 obj-$(CONFIG_LDO_VIBRATOR)	+= ldo_vibrator.o
 
 obj-$(CONFIG_SIM_DETECT)	+= sim_detect.o
diff --git a/drivers/misc/carillon/Kconfig b/drivers/misc/carillon/Kconfig
new file mode 100644
index 000000000000..3f36035cae0d
--- /dev/null
+++ b/drivers/misc/carillon/Kconfig
@@ -0,0 +1,5 @@
+comment "Sony Carillon NFC driver"
+
+config NFC_CARILLON
+	tristate "Sony Carillon protocol driver (I2C) devices"
+	default n
diff --git a/drivers/misc/carillon/Makefile b/drivers/misc/carillon/Makefile
new file mode 100644
index 000000000000..f219d1ebe699
--- /dev/null
+++ b/drivers/misc/carillon/Makefile
@@ -0,0 +1,2 @@
+obj-$(CONFIG_NFC_CARILLON) := sony_carillon_nfc.o
+sony_carillon_nfc-objs := main_module.o cxd224x/cxd224x-i2c.o bd7602/bd7602.o
diff --git a/drivers/misc/carillon/bd7602/LICENSE b/drivers/misc/carillon/bd7602/LICENSE
new file mode 100644
index 000000000000..8cdb8451d9b9
--- /dev/null
+++ b/drivers/misc/carillon/bd7602/LICENSE
@@ -0,0 +1,340 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc., <http://fsf.org/>
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+                            NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    {description}
+    Copyright (C) {year}  {fullname}
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  {signature of Ty Coon}, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
+
diff --git a/drivers/misc/carillon/bd7602/bd7602.c b/drivers/misc/carillon/bd7602/bd7602.c
new file mode 100644
index 000000000000..06272b497df9
--- /dev/null
+++ b/drivers/misc/carillon/bd7602/bd7602.c
@@ -0,0 +1,311 @@
+/* drivers/misc/bd7602.c
+ *
+ * Author: Manabu Yoshida <Manabu.X.Yoshida@sonymobile.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2, as
+ * published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ */
+
+#include <linux/err.h>
+#include <linux/i2c.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/miscdevice.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <asm/uaccess.h>
+
+#include "bd7602.h"
+
+#define BD7602_DEVICE_NAME "bd7602"
+#define BD7602_MODE_MAX 0x04
+
+struct bd7602_dev {
+	struct mutex mutex;
+	struct i2c_client *client;
+	struct miscdevice bd7602_device;
+	u8 mode;
+};
+
+static ssize_t bd7602_mode_store(struct bd7602_dev *bd7602_dev, void __user *buf)
+{
+	u8 mode;
+	int ret;
+
+	ret = copy_from_user(&mode, buf, sizeof(mode));
+	if (ret != 0) {
+		dev_err(&bd7602_dev->client->dev, "%s: Failed to copy data from user %d\n",
+				__func__, ret);
+		ret = -EIO;
+		goto out;
+	}
+
+	if (BD7602_MODE_MAX < mode) {
+		dev_err(&bd7602_dev->client->dev, "%s: Invalid mode 0x%02x\n", __func__, mode);
+		ret = -EINVAL;
+		goto out;
+	}
+
+	mutex_lock(&bd7602_dev->mutex);
+	bd7602_dev->mode = mode;
+	mutex_unlock(&bd7602_dev->mutex);
+	dev_info(&bd7602_dev->client->dev, "%s: mode: 0x%02x\n", __func__, bd7602_dev->mode);
+
+out:
+	return ret;
+}
+
+static ssize_t bd7602_mode_show(struct bd7602_dev *bd7602_dev, void __user *buf)
+{
+	int ret;
+
+	if (!buf) {
+		dev_err(&bd7602_dev->client->dev, "%s: invalid address\n", __func__);
+		return -EINVAL;
+	}
+
+	mutex_lock(&bd7602_dev->mutex);
+	ret = copy_to_user(buf, &bd7602_dev->mode, sizeof(bd7602_dev->mode));
+	if (ret != 0) {
+		dev_err(&bd7602_dev->client->dev, "%s: Failed to copy data to user %d\n",
+				__func__, ret);
+		ret = -EIO;
+	}
+	mutex_unlock(&bd7602_dev->mutex);
+	dev_info(&bd7602_dev->client->dev, "%s: mode: 0x%02x\n", __func__, bd7602_dev->mode);
+
+	return ret;
+}
+
+static ssize_t bd7602_value_store(struct bd7602_dev *bd7602_dev, void __user *buf)
+{
+	u8 data[2];
+	int ret;
+	int len = 2;
+
+	mutex_lock(&bd7602_dev->mutex);
+	data[0] = bd7602_dev->mode;
+	ret = copy_from_user(&data[1], buf, sizeof(u8));
+	if (ret != 0) {
+		mutex_unlock(&bd7602_dev->mutex);
+		dev_err(&bd7602_dev->client->dev, "%s: Failed to copy data from user %d\n",
+				__func__, ret);
+		ret = -EIO;
+		goto out;
+	}
+	ret = i2c_master_send(bd7602_dev->client, data, len);
+	if (ret != len) {
+		mutex_unlock(&bd7602_dev->mutex);
+		dev_err(&bd7602_dev->client->dev, "%s: Failed to write %d\n", __func__, ret);
+		ret = -EIO;
+		goto out;
+	}
+	mutex_unlock(&bd7602_dev->mutex);
+
+	dev_info(&bd7602_dev->client->dev, "%s: mode:0x%02x value:0x%02x\n",
+			__func__, data[0], data[1]);
+
+out:
+	return ret > 0 ? 0 : ret;
+}
+
+static ssize_t bd7602_value_show(struct bd7602_dev *bd7602_dev, void __user *buf)
+{
+	u8 data;
+	int ret;
+
+	if (!buf) {
+		dev_err(&bd7602_dev->client->dev, "%s: invalid address\n", __func__);
+		ret = -EINVAL;
+		goto out;
+	}
+
+	mutex_lock(&bd7602_dev->mutex);
+	ret = i2c_master_send(bd7602_dev->client, &bd7602_dev->mode,
+				sizeof(bd7602_dev->mode));
+	if (sizeof(bd7602_dev->mode) != ret) {
+		mutex_unlock(&bd7602_dev->mutex);
+		dev_err(&bd7602_dev->client->dev, "%s: Failed to write %d\n", __func__, ret);
+		ret = -EIO;
+		goto out;
+	}
+
+	ret = i2c_master_recv(bd7602_dev->client, &data, sizeof(data));
+	if (sizeof(data) != ret) {
+		mutex_unlock(&bd7602_dev->mutex);
+		dev_err(&bd7602_dev->client->dev, "%s: Failed to read %d\n", __func__, ret);
+		ret = -EIO;
+		goto out;
+	}
+
+	ret = copy_to_user(buf, &data, sizeof(data));
+	if (ret != 0) {
+		mutex_unlock(&bd7602_dev->mutex);
+		dev_err(&bd7602_dev->client->dev, "%s: Failed to copy data to user %d\n",
+				__func__, ret);
+		ret = -EIO;
+		goto out;
+	}
+	mutex_unlock(&bd7602_dev->mutex);
+
+	dev_info(&bd7602_dev->client->dev, "%s: mode:0x%02x value:0x%02x\n",
+			__func__, bd7602_dev->mode, data);
+
+out:
+	return ret > 0 ? 0 : ret;
+}
+
+static long bd7602_dev_unlocked_ioctl(struct file *filp,
+					 unsigned int cmd, unsigned long arg)
+{
+	struct bd7602_dev *bd7602_dev = filp->private_data;
+	int ret = -EINVAL;
+	void __user *data = (void __user *)arg;
+
+	if (!bd7602_dev) {
+		return -ENODEV;
+	}
+
+	switch (cmd) {
+	case BD7602_MODE_STORE:
+		ret = bd7602_mode_store(bd7602_dev, data);
+		break;
+
+	case BD7602_MODE_SHOW:
+		ret = bd7602_mode_show(bd7602_dev, data);
+		break;
+
+	case BD7602_VALUE_STORE:
+		ret = bd7602_value_store(bd7602_dev, data);
+		break;
+
+	case BD7602_VALUE_SHOW:
+		ret = bd7602_value_show(bd7602_dev, data);
+		break;
+
+	default:
+		dev_err(&bd7602_dev->client->dev,
+			"%s, unknown cmd (%x, %lx)\n", __func__, cmd, arg);
+	}
+
+	return ret;
+}
+
+static int bd7602_dev_open(struct inode *inode, struct file *filp)
+{
+	struct bd7602_dev *bd7602_dev = container_of(filp->private_data,
+                                                       struct bd7602_dev,
+                                                       bd7602_device);
+	filp->private_data = bd7602_dev;
+
+	dev_info(&bd7602_dev->client->dev, "%s, open\n", __func__);
+
+	return 0;
+}
+
+const struct file_operations bd7602_dev_fops = {
+	.owner = THIS_MODULE,
+	.llseek = no_llseek,
+	.open = bd7602_dev_open,
+	.unlocked_ioctl	= bd7602_dev_unlocked_ioctl
+};
+
+static int bd7602_probe(struct i2c_client *client,
+				const struct i2c_device_id *id)
+{
+	int ret;
+	struct bd7602_dev *bd7602_dev;
+
+	dev_info(&client->dev, "%s, probing bd7602 driver flags = %x\n",
+			__func__, client->flags);
+
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
+		dev_err(&client->dev, "need I2C_FUNC_I2C\n");
+		ret = -ENODEV;
+		goto err_exit;
+	}
+
+	bd7602_dev = kzalloc(sizeof(*bd7602_dev), GFP_KERNEL);
+	if (bd7602_dev == NULL) {
+		dev_err(&client->dev,
+			"failed to allocate memory for module data\n");
+		ret = -ENOMEM;
+		goto err_kzalloc;
+	}
+
+	bd7602_dev->client = client;
+	i2c_set_clientdata(client, bd7602_dev);
+
+	mutex_init(&bd7602_dev->mutex);
+
+	bd7602_dev->bd7602_device.minor = MISC_DYNAMIC_MINOR;
+	bd7602_dev->bd7602_device.name = "bd7602-i2c";
+	bd7602_dev->bd7602_device.fops = &bd7602_dev_fops;
+
+	ret = misc_register(&bd7602_dev->bd7602_device);
+	if (ret) {
+		dev_err(&client->dev, "misc_register failed\n");
+		goto err_misc_register;
+	}
+
+	dev_info(&client->dev,
+		"%s, probing bd7602 driver exited successfully\n",
+		__func__);
+	return 0;
+
+err_misc_register:
+	mutex_destroy(&bd7602_dev->mutex);
+	i2c_set_clientdata(client, NULL);
+	kzfree(bd7602_dev);
+err_kzalloc:
+err_exit:
+	return ret;
+}
+
+static int bd7602_remove(struct i2c_client *client)
+{
+	struct bd7602_dev *bd7602_dev = i2c_get_clientdata(client);
+
+	mutex_destroy(&bd7602_dev->mutex);
+	i2c_set_clientdata(client, NULL);
+	kzfree(bd7602_dev);
+
+	return 0;
+}
+
+static const struct i2c_device_id bd7602_id[] = {
+	{ BD7602_DEVICE_NAME, 0 },
+	{ }
+};
+
+static struct of_device_id bd7602_match_table[] = {
+	{ .compatible = "rohm,bd7602", },
+	{ },
+};
+
+static struct i2c_driver bd7602_driver = {
+	.id_table = bd7602_id,
+	.probe = bd7602_probe,
+	.remove = bd7602_remove,
+	.driver = {
+		.owner = THIS_MODULE,
+		.name = BD7602_DEVICE_NAME,
+		.of_match_table = bd7602_match_table,
+	},
+};
+
+int bd7602_dev_init(void)
+{
+	return i2c_add_driver(&bd7602_driver);
+}
+
+void bd7602_dev_exit(void)
+{
+	i2c_del_driver(&bd7602_driver);
+}
+
+MODULE_AUTHOR("Manabu Yoshida <Manabu.X.Yoshida@sonymobile.com>");
+MODULE_DESCRIPTION("ROHM BD7602 Power IC Driver");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/misc/carillon/bd7602/bd7602.h b/drivers/misc/carillon/bd7602/bd7602.h
new file mode 100644
index 000000000000..ccef56d3f69d
--- /dev/null
+++ b/drivers/misc/carillon/bd7602/bd7602.h
@@ -0,0 +1,18 @@
+#ifndef _BD7602_H
+#define _BD7602_H
+
+#define BD7602_MAGIC 'J'
+
+/*
+ * BD7602 MODE and VALUE via ioctl
+ * BD7602_MODE_STORE: store target register address
+ * BD7602_MODE_SHOW: retrieve current register address
+ * BD7602_VALUE_STORE: store register value
+ * BD7602_VALUE_SHOW: retrieve register value
+ */
+#define BD7602_MODE_STORE		_IOW(BD7602_MAGIC, 0x01, char *)
+#define BD7602_MODE_SHOW		_IOR(BD7602_MAGIC, 0x02, char *)
+#define BD7602_VALUE_STORE		_IOW(BD7602_MAGIC, 0x03, char *)
+#define BD7602_VALUE_SHOW		_IOR(BD7602_MAGIC, 0x04, char *)
+
+#endif
diff --git a/drivers/misc/carillon/cxd224x/LICENSE b/drivers/misc/carillon/cxd224x/LICENSE
new file mode 100644
index 000000000000..8cdb8451d9b9
--- /dev/null
+++ b/drivers/misc/carillon/cxd224x/LICENSE
@@ -0,0 +1,340 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc., <http://fsf.org/>
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+                            NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    {description}
+    Copyright (C) {year}  {fullname}
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  {signature of Ty Coon}, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
+
diff --git a/drivers/misc/carillon/cxd224x/cxd224x-i2c.c b/drivers/misc/carillon/cxd224x/cxd224x-i2c.c
new file mode 100644
index 000000000000..fd80e4a85b59
--- /dev/null
+++ b/drivers/misc/carillon/cxd224x/cxd224x-i2c.c
@@ -0,0 +1,843 @@
+/*
+ *  cxd224x-i2c.c - cxd224x NFC i2c driver
+ *
+ * Copyright (C) 2013- Sony Corporation.
+ * Copyright (C) 2012 Broadcom Corporation.
+ * Copyright (C) 2017 Sony Mobile Communications Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ * NOTE: This file has been modified by Sony Mobile Communications Inc.
+ * Modifications are licensed under the License.
+ *
+ */
+
+#include <linux/clk.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/fs.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+#include <linux/list.h>
+#include <linux/i2c.h>
+#include <linux/irq.h>
+#include <linux/jiffies.h>
+#include <linux/uaccess.h>
+#include <linux/delay.h>
+#include <linux/interrupt.h>
+#include <linux/io.h>
+#include <linux/platform_device.h>
+#include <linux/gpio.h>
+#include <linux/miscdevice.h>
+#include <linux/spinlock.h>
+#include <linux/pinctrl/consumer.h>
+#include <linux/poll.h>
+#include <linux/version.h>
+#include <linux/of_gpio.h>
+
+#include "cxd224x.h"
+
+#define CXD224X_WAKE_LOCK_TIMEOUT	1		/* wake timeout for HOSTINT (sec) */
+
+/* do not change below */
+#define MAX_BUFFER_SIZE		780
+
+/* Read data */
+#define PACKET_HEADER_SIZE_NCI	(3)
+#define PACKET_HEADER_SIZE_HCI	(3)
+#define PACKET_TYPE_NCI		(16)
+#define PACKET_TYPE_HCIEV	(4)
+#define MAX_PACKET_SIZE		(PACKET_HEADER_SIZE_NCI + 255)
+
+/* RESET */
+#define RESET_ASSERT_MS         (1)
+
+#define CXD224X_PINCTRL_ACTIVE  "felica_active"
+#define CXD224X_PINCTRL_SUSPEND "felica_suspend"
+
+struct cxd224x_dev {
+	wait_queue_head_t read_wq;
+	struct mutex read_mutex;
+	struct i2c_client *client;
+	struct miscdevice cxd224x_device;
+        struct cxd224x_platform_data *gpio;
+	bool irq_enabled;
+	struct mutex lock;
+	spinlock_t irq_enabled_lock;
+	unsigned int users;
+	unsigned int count_irq;
+	/* Driver message queue */
+	struct workqueue_struct	*wqueue;
+	struct work_struct qmsg;
+	struct pinctrl *pinctrl;
+	struct pinctrl_state *gpio_state_active;
+	struct pinctrl_state *gpio_state_suspend;
+};
+
+static struct cxd224x_dev *p_cxd224x_dev;
+static void cxd224x_enable_pon(struct cxd224x_dev *cxd224x_dev);
+static void cxd224x_conditional_disable_pon(struct cxd224x_dev *cxd224x_dev);
+
+#if defined(CONFIG_NFC_CXD224X_RST) || defined(CONFIG_NFC_CXD224X_RST_MODULE)
+static void cxd224x_workqueue(struct work_struct *work)
+{
+	struct cxd224x_dev *cxd224x_dev = container_of(work, struct cxd224x_dev, qmsg);
+	unsigned long flags;
+
+	dev_info(&cxd224x_dev->client->dev, "%s, xrst assert\n", __func__);
+        spin_lock_irqsave(&cxd224x_dev->irq_enabled_lock, flags);
+	gpio_set_value(cxd224x_dev->gpio->rst_gpio, CXDNFC_RST_ACTIVE);
+        cxd224x_dev->count_irq=0; /* clear irq */
+        spin_unlock_irqrestore(&cxd224x_dev->irq_enabled_lock, flags);
+
+	msleep(RESET_ASSERT_MS);
+	dev_info(&cxd224x_dev->client->dev, "%s, xrst deassert\n", __func__);
+	gpio_set_value(cxd224x_dev->gpio->rst_gpio, ~CXDNFC_RST_ACTIVE & 0x1);
+}
+
+static int __init init_wqueue(struct cxd224x_dev *cxd224x_dev)
+{
+	INIT_WORK(&cxd224x_dev->qmsg, cxd224x_workqueue);
+	cxd224x_dev->wqueue = create_workqueue("cxd224x-i2c_wrokq");
+	if (cxd224x_dev->wqueue == NULL)
+		return -EBUSY;
+	return 0;
+}
+#endif /* CONFIG_NFC_CXD224X_RST */
+
+static void cxd224x_init_stat(struct cxd224x_dev *cxd224x_dev)
+{
+	cxd224x_dev->count_irq = 0;
+}
+
+static void cxd224x_disable_irq(struct cxd224x_dev *cxd224x_dev)
+{
+	unsigned long flags;
+	spin_lock_irqsave(&cxd224x_dev->irq_enabled_lock, flags);
+	if (cxd224x_dev->irq_enabled) {
+		disable_irq_nosync(cxd224x_dev->client->irq);
+		cxd224x_dev->irq_enabled = false;
+	}
+	spin_unlock_irqrestore(&cxd224x_dev->irq_enabled_lock, flags);
+}
+
+static void cxd224x_enable_irq(struct cxd224x_dev *cxd224x_dev)
+{
+	unsigned long flags;
+	spin_lock_irqsave(&cxd224x_dev->irq_enabled_lock, flags);
+	if (!cxd224x_dev->irq_enabled) {
+		cxd224x_dev->irq_enabled = true;
+		enable_irq(cxd224x_dev->client->irq);
+	}
+	spin_unlock_irqrestore(&cxd224x_dev->irq_enabled_lock, flags);
+}
+
+static irqreturn_t cxd224x_dev_irq_handler(int irq, void *dev_id)
+{
+	struct cxd224x_dev *cxd224x_dev = dev_id;
+	unsigned long flags;
+
+	dev_info(&cxd224x_dev->client->dev, "%s\n", __func__);
+
+	spin_lock_irqsave(&cxd224x_dev->irq_enabled_lock, flags);
+	cxd224x_dev->count_irq++;
+	if (cxd224x_dev->irq_enabled) {
+		cxd224x_enable_pon(cxd224x_dev);
+	}
+	spin_unlock_irqrestore(&cxd224x_dev->irq_enabled_lock, flags);
+
+	wake_up(&cxd224x_dev->read_wq);
+
+	return IRQ_HANDLED;
+}
+
+static unsigned int cxd224x_dev_poll(struct file *filp, poll_table *wait)
+{
+	struct cxd224x_dev *cxd224x_dev = filp->private_data;
+	unsigned int mask = 0;
+	unsigned long flags;
+
+	poll_wait(filp, &cxd224x_dev->read_wq, wait);
+
+	spin_lock_irqsave(&cxd224x_dev->irq_enabled_lock, flags);
+	if (cxd224x_dev->count_irq > 0)
+	{
+		mask |= POLLIN | POLLRDNORM;
+	}
+	spin_unlock_irqrestore(&cxd224x_dev->irq_enabled_lock, flags);
+
+	if(mask) 
+		pm_wakeup_event(&cxd224x_dev->client->dev,
+			jiffies_to_msecs(CXD224X_WAKE_LOCK_TIMEOUT*HZ));
+
+	return mask;
+}
+
+static ssize_t cxd224x_dev_read(struct file *filp, char __user *buf,
+				  size_t count, loff_t *offset)
+{
+	struct cxd224x_dev *cxd224x_dev = filp->private_data;
+	unsigned char tmp[MAX_BUFFER_SIZE];
+	int total, len, ret;
+	unsigned long flags;
+
+	total = 0;
+	len = 0;
+
+	if (count > MAX_BUFFER_SIZE)
+		count = MAX_BUFFER_SIZE;
+
+	spin_lock_irqsave(&cxd224x_dev->irq_enabled_lock, flags);
+	if (cxd224x_dev->count_irq > 0)
+		cxd224x_dev->count_irq--;
+	spin_unlock_irqrestore(&cxd224x_dev->irq_enabled_lock, flags);
+
+	mutex_lock(&cxd224x_dev->read_mutex);
+
+	ret = i2c_master_recv(cxd224x_dev->client, tmp, 3);
+	if (ret == 3 && (tmp[0] != 0xff)) {
+		total = ret;
+
+		len = tmp[PACKET_HEADER_SIZE_NCI-1];
+
+		/** make sure full packet fits in the buffer
+		**/
+		if (len > 0 && (len + total) <= count) {
+			/** read the remainder of the packet.
+			**/
+			ret = i2c_master_recv(cxd224x_dev->client, tmp+total, len);
+			if (ret == len)
+				total += len;
+		}
+	} 
+
+	mutex_unlock(&cxd224x_dev->read_mutex);
+
+	if (total > count || copy_to_user(buf, tmp, total)) {
+		dev_err(&cxd224x_dev->client->dev,
+			"failed to copy to user space, total = %d\n", total);
+		total = -EFAULT;
+	}
+
+	return total;
+}
+
+static ssize_t cxd224x_dev_write(struct file *filp, const char __user *buf,
+				   size_t count, loff_t *offset)
+{
+	struct cxd224x_dev *cxd224x_dev = filp->private_data;
+	char tmp[MAX_BUFFER_SIZE];
+	int ret;
+
+	if (count > MAX_BUFFER_SIZE) {
+		dev_err(&cxd224x_dev->client->dev, "out of memory\n");
+		return -ENOMEM;
+	}
+
+	if (copy_from_user(tmp, buf, count)) {
+		dev_err(&cxd224x_dev->client->dev,
+			"failed to copy from user space\n");
+		return -EFAULT;
+	}
+
+	mutex_lock(&cxd224x_dev->read_mutex);
+	/* Write data */
+
+	ret = i2c_master_send(cxd224x_dev->client, tmp, count);
+	if (ret != count) {
+		dev_err(&cxd224x_dev->client->dev,
+			"failed to write %d\n", ret);
+		ret = -EIO;
+	}
+	mutex_unlock(&cxd224x_dev->read_mutex);
+
+	return ret;
+}
+
+static int cxd224x_dev_open(struct inode *inode, struct file *filp)
+{
+	int ret = 0;
+	int call_enable = 0;
+	struct cxd224x_dev *cxd224x_dev = container_of(filp->private_data,
+                                                       struct cxd224x_dev,
+                                                       cxd224x_device);
+	filp->private_data = cxd224x_dev;
+	mutex_lock(&cxd224x_dev->lock);
+	if (!cxd224x_dev->users)
+	{
+		cxd224x_init_stat(cxd224x_dev);
+		call_enable = 1;
+	}
+	cxd224x_dev->users++;
+	if (call_enable)
+		cxd224x_enable_irq(cxd224x_dev);
+	mutex_unlock(&cxd224x_dev->lock);
+
+	dev_info(&cxd224x_dev->client->dev,
+		 "open %d,%d users=%d\n", imajor(inode), iminor(inode), cxd224x_dev->users);
+
+	return ret;
+}
+
+static int cxd224x_dev_release(struct inode *inode, struct file *filp)
+{
+	int ret = 0;
+	int call_disable = 0;
+	struct cxd224x_dev *cxd224x_dev = filp->private_data;
+
+	mutex_lock(&cxd224x_dev->lock);
+	cxd224x_dev->users--;
+	if (!cxd224x_dev->users)
+	{
+		call_disable = 1;
+	}
+	if (call_disable)
+        {
+		cxd224x_disable_irq(cxd224x_dev);
+		gpio_set_value(cxd224x_dev->gpio->wake_gpio, 0);
+        }
+	mutex_unlock(&cxd224x_dev->lock);
+
+	dev_info(&cxd224x_dev->client->dev,
+		 "release %d,%d users=%d\n", imajor(inode), iminor(inode), cxd224x_dev->users);
+
+	return ret;
+}
+
+static void cxd224x_enable_pon(struct cxd224x_dev *cxd224x_dev)
+{
+	gpio_set_value(cxd224x_dev->gpio->wake_gpio, 1);
+}
+
+static void cxd224x_conditional_disable_pon(struct cxd224x_dev *cxd224x_dev)
+{
+	unsigned long flag;
+
+	spin_lock_irqsave(&cxd224x_dev->irq_enabled_lock, flag);
+	/* Do not disable PON when data is available to be read */
+	if (cxd224x_dev->count_irq == 0)
+		gpio_set_value(cxd224x_dev->gpio->wake_gpio, 0);
+	spin_unlock_irqrestore(&cxd224x_dev->irq_enabled_lock, flag);
+}
+
+static long cxd224x_dev_unlocked_ioctl(struct file *filp,
+					 unsigned int cmd, unsigned long arg)
+{
+	struct cxd224x_dev *cxd224x_dev = filp->private_data;
+
+	switch (cmd) {
+	case CXDNFC_RST_CTL:
+#if defined(CONFIG_NFC_CXD224X_RST) || defined(CONFIG_NFC_CXD224X_RST_MODULE)
+		dev_info(&cxd224x_dev->client->dev, "%s, rst arg=%d\n", __func__, (int)arg);
+		return (queue_work(cxd224x_dev->wqueue, &cxd224x_dev->qmsg) ? 0 : 1);
+#endif
+		break;
+	case CXDNFC_POWER_CTL:
+#if defined(CONFIG_NFC_CXD224X_VEN) || defined(CONFIG_NFC_CXD224X_VEN_MODULE)
+		if (arg == 0) {
+			gpio_set_value(cxd224x_dev->en_gpio, 1);
+		} else if (arg == 1) {
+			gpio_set_value(cxd224x_dev->en_gpio, 0);  
+		} else {
+			/* do nothing */
+		}
+#else
+                return 1; /* not support */
+#endif
+		break;
+	case CXDNFC_WAKE_CTL:
+		if (arg == 0) {
+			/* PON HIGH (normal power mode)*/
+			cxd224x_enable_pon(cxd224x_dev);
+		} else if (arg == 1) {
+			/* PON LOW (low power mode) */
+			cxd224x_conditional_disable_pon(cxd224x_dev);
+		} else {
+			/* do nothing */
+		}
+		break;
+	default:
+		dev_err(&cxd224x_dev->client->dev,
+			"%s, unknown cmd (%x, %lx)\n", __func__, cmd, arg);
+		return 0;
+	}
+
+	return 0;
+}
+
+static const struct file_operations cxd224x_dev_fops = {
+	.owner = THIS_MODULE,
+	.llseek = no_llseek,
+	.poll = cxd224x_dev_poll,
+	.read = cxd224x_dev_read,
+	.write = cxd224x_dev_write,
+	.open = cxd224x_dev_open,
+	.release = cxd224x_dev_release,
+	.unlocked_ioctl = cxd224x_dev_unlocked_ioctl
+};
+
+static int cxd224x_pinctrl_init(struct device *dev, struct cxd224x_dev *cxd224x_dev)
+{
+	int ret = 0;
+
+	cxd224x_dev->pinctrl = devm_pinctrl_get(dev);
+	if (IS_ERR_OR_NULL(cxd224x_dev->pinctrl)) {
+		dev_err(dev, "error devm_pinctrl_get() failed err:%ld\n",
+			PTR_ERR(cxd224x_dev->pinctrl));
+		ret = PTR_ERR(cxd224x_dev->pinctrl);
+		goto out;
+	}
+
+	cxd224x_dev->gpio_state_active = pinctrl_lookup_state(
+		cxd224x_dev->pinctrl, CXD224X_PINCTRL_ACTIVE);
+
+	if (IS_ERR_OR_NULL(cxd224x_dev->gpio_state_active)) {
+		ret = PTR_ERR(cxd224x_dev->gpio_state_active);
+		dev_info(dev, "note pinctrl_lookup_state(%s) err:%d\n",
+				CXD224X_PINCTRL_ACTIVE, ret);
+		goto out;
+	}
+
+	cxd224x_dev->gpio_state_suspend = pinctrl_lookup_state(
+		cxd224x_dev->pinctrl, CXD224X_PINCTRL_SUSPEND);
+
+	if (IS_ERR_OR_NULL(cxd224x_dev->gpio_state_suspend)) {
+		ret = PTR_ERR(cxd224x_dev->gpio_state_suspend);
+		dev_info(dev, "note pinctrl_lookup_state(%s) err:%d\n",
+				CXD224X_PINCTRL_ACTIVE, ret);
+		goto out;
+	}
+
+out:
+	return ret;
+}
+
+static void cxd224x_pinctrl_select_state(struct device *dev, bool active)
+{
+	struct cxd224x_dev *cxd224x_dev = dev_get_drvdata(dev);
+	struct pinctrl_state *pins_state;
+	const char *pins_state_name;
+
+	if (active) {
+		pins_state = cxd224x_dev->gpio_state_active;
+		pins_state_name = CXD224X_PINCTRL_ACTIVE;
+	} else {
+		pins_state = cxd224x_dev->gpio_state_suspend;
+		pins_state_name = CXD224X_PINCTRL_SUSPEND;
+	}
+
+	if (!IS_ERR_OR_NULL(pins_state)) {
+		int ret = pinctrl_select_state(cxd224x_dev->pinctrl,
+						pins_state);
+		if (ret)
+			dev_err(dev, "error pinctrl_select_state(%s) err:%d\n",
+				pins_state_name, ret);
+	} else {
+		dev_err(dev,
+			"error pinctrl state-name:'%s' is not configured\n",
+			pins_state_name);
+	}
+}
+
+#if defined(CONFIG_OF)
+static int cxd224x_parse_dt(struct device *dev,
+                            struct cxd224x_platform_data *pdata)
+{
+        int ret=0;
+
+        /*nfc_int*/
+	pdata->irq_gpio =  of_get_named_gpio_flags(dev->of_node, "sony,nfc_int", 0,NULL);
+	if (pdata->irq_gpio < 0) {
+		pr_err( "failed to get \"nfc_int\"\n");
+		goto dt_err;
+	}
+
+#if defined(CONFIG_NFC_CXD224X_VEN) || defined(CONFIG_NFC_CXD224X_VEN_MODULE)
+        pdata->en_gpio = of_get_named_gpio_flags(dev->of_node, "sony,nfc_ven", 0,NULL);
+	if (pdata->en_gpio< 0) {
+		pr_err( "failed to get \"nfc_ven\"\n");
+		goto dt_err;
+	}
+#endif
+
+#if defined(CONFIG_NFC_CXD224X_RST) || defined(CONFIG_NFC_CXD224X_RST_MODULE)
+	pdata->rst_gpio = of_get_named_gpio_flags(dev->of_node, "sony,nfc_rst", 0,NULL);
+	if (pdata->rst_gpio< 0) {
+		pr_err( "failed to get \"nfc_rst\"\n");
+		goto dt_err;
+	}
+#endif
+
+	pdata->wake_gpio = of_get_named_gpio_flags(dev->of_node, "sony,nfc_wake", 0,NULL);
+	if (pdata->wake_gpio< 0) {
+		pr_err( "failed to get \"nfc_wake\"\n");
+		goto dt_err;
+	}
+        return 0;
+
+dt_err:
+        return ret;        
+}
+#endif
+
+static int cxd224x_probe(struct i2c_client *client,
+			   const struct i2c_device_id *id)
+{
+	int ret;
+	struct cxd224x_platform_data *platform_data=NULL;
+	struct cxd224x_dev *cxd224x_dev;
+	struct clk *felica_clk = NULL;
+	int irq_gpio_ok  = 0;
+#if defined(CONFIG_NFC_CXD224X_VEN) || defined(CONFIG_NFC_CXD224X_VEN_MODULE)
+	int en_gpio_ok   = 0;
+#endif
+#if defined(CONFIG_NFC_CXD224X_RST) || defined(CONFIG_NFC_CXD224X_RST_MODULE)
+	int rst_gpio_ok = 0;
+#endif
+	int wake_gpio_ok = 0;
+
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
+		dev_err(&client->dev, "need I2C_FUNC_I2C\n");
+		return -ENODEV;
+	}
+        
+#if defined(CONFIG_OF)
+        platform_data = kzalloc(sizeof(struct cxd224x_platform_data),
+				GFP_KERNEL);
+	if (platform_data == NULL) {
+		dev_err(&client->dev, "failed to allocate memory\n");
+		return -ENOMEM;
+	}
+        ret = cxd224x_parse_dt(&client->dev, platform_data);
+        if (ret) {
+                dev_err(&client->dev, "failed to parse device tree\n");
+                kfree(platform_data);
+                return -ENODEV;
+        }
+#else
+	platform_data = client->dev.platform_data;
+
+	dev_info(&client->dev, "%s, probing cxd224x driver flags = %x\n", __func__, client->flags);
+	if (platform_data == NULL) {
+		dev_err(&client->dev, "nfc probe fail\n");
+		return -ENODEV;
+	}
+#endif
+	dev_info(&client->dev, "%s, rst_gpio(%d)\n", __func__, platform_data->rst_gpio);
+        dev_info(&client->dev, "%s, ven_gpio(%d)\n", __func__, platform_data->en_gpio);
+        dev_info(&client->dev, "%s, irq_gpio(%d)\n", __func__, platform_data->irq_gpio);
+        dev_info(&client->dev, "%s, wake_gpio(%d)\n", __func__, platform_data->wake_gpio);
+        
+	irq_gpio_ok=1;
+        client->irq = gpio_to_irq(platform_data->irq_gpio);
+        if (client->irq<0)
+        {
+                dev_err(&client->dev, "%s, failed to allocate irq=%d\n", __func__, client->irq);
+		return -ENODEV;
+        }
+        dev_info(&client->dev, "%s, irq(%d)\n", __func__, client->irq);
+
+#if defined(CONFIG_NFC_CXD224X_VEN) || defined(CONFIG_NFC_CXD224X_VEN_MODULE)
+	ret = gpio_request_one(platform_data->en_gpio, GPIOF_OUT_INIT_LOW, "nfc_cen");
+	if (ret)
+		goto err_exit;
+	en_gpio_ok=1;
+        ret = gpio_direction_output(platform_data->en_gpio, 0);
+        if (ret)
+            return -ENODEV;
+#endif
+
+#if defined(CONFIG_NFC_CXD224X_RST) || defined(CONFIG_NFC_CXD224X_RST_MODULE)
+	ret = gpio_request_one(platform_data->rst_gpio, GPIOF_OUT_INIT_HIGH, "nfc_rst");
+	if (ret)
+		goto err_exit;
+	rst_gpio_ok=1;
+        ret = gpio_direction_output(platform_data->rst_gpio, ~CXDNFC_RST_ACTIVE & 0x1);
+        if (ret)
+            return -ENODEV;
+	dev_info(&client->dev, "%s, xrst deassert\n", __func__);
+#endif
+
+	ret = gpio_request_one(platform_data->wake_gpio, GPIOF_OUT_INIT_LOW, "nfc_wake");
+	if (ret)
+		goto err_exit;
+	wake_gpio_ok=1;
+        ret = gpio_direction_output(platform_data->wake_gpio,0);
+
+	cxd224x_dev = kzalloc(sizeof(*cxd224x_dev), GFP_KERNEL);
+	if (cxd224x_dev == NULL) {
+		dev_err(&client->dev,
+			"failed to allocate memory for module data\n");
+		ret = -ENOMEM;
+		goto err_exit;
+	}
+
+	cxd224x_dev->client = client;
+        cxd224x_dev->gpio = platform_data;
+	cxd224x_dev->users =0;
+
+	/* init mutex and queues */
+	init_waitqueue_head(&cxd224x_dev->read_wq);
+	mutex_init(&cxd224x_dev->read_mutex);
+	mutex_init(&cxd224x_dev->lock);
+	spin_lock_init(&cxd224x_dev->irq_enabled_lock);
+
+#if defined(CONFIG_NFC_CXD224X_RST) || defined(CONFIG_NFC_CXD224X_RST_MODULE)
+	if (init_wqueue(cxd224x_dev) != 0) {
+		dev_err(&client->dev, "init workqueue failed\n");
+		goto err_exit;
+	}
+#endif
+
+	ret = cxd224x_pinctrl_init(&client->dev, cxd224x_dev);
+	if (ret) {
+		dev_err(&client->dev, "pinctrl_init failed\n");
+		goto err_pinctrl_init;
+	}
+
+	cxd224x_dev->cxd224x_device.minor = MISC_DYNAMIC_MINOR;
+	cxd224x_dev->cxd224x_device.name = "cxd224x-i2c";
+	cxd224x_dev->cxd224x_device.fops = &cxd224x_dev_fops;
+
+	ret = misc_register(&cxd224x_dev->cxd224x_device);
+	if (ret) {
+		dev_err(&client->dev, "misc_register failed\n");
+		goto err_misc_register;
+	}
+
+	felica_clk = clk_get(&client->dev, "felica_clk");
+	if (IS_ERR(felica_clk)) {
+		dev_info(&client->dev, "Couldn't get felica_clk, XTAL should be used\n");
+	} else {
+		ret = clk_prepare_enable(felica_clk);
+		if (ret) {
+			dev_err(&client->dev, "failed to enable felica_clk\n");
+			goto err_clk_enable;
+		}
+	}
+
+	/* request irq.  the irq is set whenever the chip has data available
+	 * for reading.  it is cleared when all data has been read.
+	 */
+	dev_info(&client->dev, "requesting IRQ %d\n", client->irq);
+	cxd224x_dev->irq_enabled = true;
+	ret = request_irq(client->irq, cxd224x_dev_irq_handler,
+			  IRQF_TRIGGER_FALLING, client->name, cxd224x_dev);
+	if (ret) {
+		dev_err(&client->dev, "request_irq failed\n");
+		goto err_request_irq_failed;
+	}
+	cxd224x_disable_irq(cxd224x_dev);
+	i2c_set_clientdata(client, cxd224x_dev);
+	cxd224x_pinctrl_select_state(&client->dev, true);
+	device_init_wakeup(&client->dev, 1);
+	p_cxd224x_dev = cxd224x_dev;
+
+	dev_info(&client->dev,
+		 "%s, probing cxd224x driver exited successfully\n",
+		 __func__);
+	return 0;
+
+err_request_irq_failed:
+	misc_deregister(&cxd224x_dev->cxd224x_device);
+err_clk_enable:
+	clk_put(felica_clk);
+err_pinctrl_init:
+err_misc_register:
+	mutex_destroy(&cxd224x_dev->read_mutex);
+	kfree(cxd224x_dev);
+err_exit:
+	if(irq_gpio_ok)
+		gpio_free(platform_data->irq_gpio);
+#if defined(CONFIG_NFC_CXD224X_VEN) || defined(CONFIG_NFC_CXD224X_VEN_MODULE)
+	if(en_gpio_ok)
+		gpio_free(platform_data->en_gpio);
+#endif
+#if defined(CONFIG_NFC_CXD224X_RST) || defined(CONFIG_NFC_CXD224X_RST_MODULE)
+	if(rst_gpio_ok)
+		gpio_free(platform_data->rst_gpio);
+#endif
+	if(wake_gpio_ok)
+		gpio_free(platform_data->wake_gpio);
+        
+#if defined(CONFIG_OF)
+        if(platform_data)
+                kfree(platform_data);
+#endif
+	return ret;
+}
+
+static int cxd224x_remove(struct i2c_client *client)
+{
+	struct cxd224x_dev *cxd224x_dev;
+
+	cxd224x_dev = i2c_get_clientdata(client);
+
+	device_wakeup_disable(&client->dev);
+
+	free_irq(client->irq, cxd224x_dev);
+	misc_deregister(&cxd224x_dev->cxd224x_device);
+	mutex_destroy(&cxd224x_dev->read_mutex);
+        if(cxd224x_dev->gpio)
+        {
+                gpio_free(cxd224x_dev->gpio->irq_gpio);
+                gpio_free(cxd224x_dev->gpio->wake_gpio);
+
+#if defined(CONFIG_NFC_CXD224X_VEN) || defined(CONFIG_NFC_CXD224X_VEN_MODULE)
+                gpio_free(cxd224x_dev->gpio->en_gpio);
+#endif
+#if defined(CONFIG_NFC_CXD224X_RST) || defined(CONFIG_NFC_CXD224X_RST_MODULE)
+                gpio_free(cxd224x_dev->gpio->rst_gpio);
+#endif
+
+#if defined(CONFIG_OF)
+
+                kfree(cxd224x_dev->gpio);
+#endif
+        }
+	kfree(cxd224x_dev);
+        
+	return 0;
+}
+
+#ifdef CONFIG_PM_SLEEP
+static int cxd224x_suspend(struct device *dev)
+{
+	struct cxd224x_dev *cxd224x_dev = dev_get_drvdata(dev);
+
+	dev_info(dev, "%s\n", __func__);
+
+	if (device_may_wakeup(&cxd224x_dev->client->dev)) {
+		int irq = gpio_to_irq(cxd224x_dev->gpio->irq_gpio);
+		enable_irq_wake(irq);
+	}
+
+	cxd224x_pinctrl_select_state(dev, false);
+
+	return 0;
+}
+
+static int cxd224x_resume(struct device *dev)
+{
+	struct cxd224x_dev *cxd224x_dev = dev_get_drvdata(dev);
+
+	dev_info(dev, "%s\n", __func__);
+
+	if (device_may_wakeup(&cxd224x_dev->client->dev)) {
+		int irq = gpio_to_irq(cxd224x_dev->gpio->irq_gpio);
+		disable_irq_wake(irq);
+	}
+
+	cxd224x_pinctrl_select_state(dev, true);
+
+	return 0;
+}
+
+static const struct dev_pm_ops cxd224x_pm_ops = {
+	.suspend	= cxd224x_suspend,
+	.resume		= cxd224x_resume,
+};
+#endif
+
+static const struct i2c_device_id cxd224x_id[] = {
+	{"cxd224x-i2c", 0},
+	{}
+};
+MODULE_DEVICE_TABLE(i2c, cxd224x_id);
+
+static struct i2c_driver cxd224x_driver = {
+	.id_table = cxd224x_id,
+	.probe = cxd224x_probe,
+	.remove = cxd224x_remove,
+	.driver = {
+		.owner = THIS_MODULE,
+		.name = "cxd224x-i2c",
+	},
+};
+
+static const struct platform_device_id cxd224x_pm_ops_id[] = {
+	{ "cxd224x-pm-ops", 0 },
+	{ }
+};
+
+static const struct of_device_id cxd224x_pm_ops_match_table[] = {
+	{ .compatible = "sony,cxd224x-pm-ops" },
+	{ }
+};
+
+static int cxd224x_pm_ops_probe(struct platform_device *pdev)
+{
+	dev_info(&pdev->dev, "%s, probing cxd224x PM OPS driver\n", __func__);
+
+	if (!p_cxd224x_dev)
+		return -ENODEV;
+
+	platform_set_drvdata(pdev, p_cxd224x_dev);
+
+	dev_info(&pdev->dev,
+		"%s, probing cxd224x PM OPS driver successfully\n", __func__);
+
+	return 0;
+}
+
+static struct platform_driver cxd224x_pm_ops_driver = {
+	.id_table = cxd224x_pm_ops_id,
+	.probe = cxd224x_pm_ops_probe,
+	.driver		= {
+		.name		= "cxd224x-pm-ops",
+		.of_match_table	= cxd224x_pm_ops_match_table,
+#ifdef CONFIG_PM
+		.pm		= &cxd224x_pm_ops,
+#endif
+	},
+};
+
+/*
+ * module load/unload record keeping
+ */
+
+int cxd224x_dev_init(void)
+{
+	int ret;
+
+	ret = i2c_add_driver(&cxd224x_driver);
+	if (ret)
+		goto exit;
+
+	ret = platform_driver_register(&cxd224x_pm_ops_driver);
+	if (ret)
+		goto exit_del_i2c_driver;
+
+	return 0;
+
+exit_del_i2c_driver:
+	i2c_del_driver(&cxd224x_driver);
+
+exit:
+	return ret;
+}
+
+void cxd224x_dev_exit(void)
+{
+	if (p_cxd224x_dev)
+		p_cxd224x_dev = NULL;
+
+	i2c_del_driver(&cxd224x_driver);
+	platform_driver_unregister(&cxd224x_pm_ops_driver);
+}
+
+MODULE_AUTHOR("Sony");
+MODULE_DESCRIPTION("NFC cxd224x driver");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/misc/carillon/cxd224x/cxd224x.h b/drivers/misc/carillon/cxd224x/cxd224x.h
new file mode 100644
index 000000000000..6e2d171c8ce4
--- /dev/null
+++ b/drivers/misc/carillon/cxd224x/cxd224x.h
@@ -0,0 +1,47 @@
+/*
+ *  cxd224x-i2c.c - cxd224x NFC driver
+ *
+ * Copyright (C) 2013- Sony Corporation.
+ * Copyright (C) 2012 Broadcom Corporation.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#ifndef _CXD224X_H
+#define _CXD224X_H
+
+#define CXDNFC_MAGIC 'S'
+/*
+ * CXDNFC power control via ioctl
+ * CXDNFC_POWER_CTL(0): power off
+ * CXDNFC_POWER_CTL(1): power on
+ * CXDNFC_WAKE_CTL(0): PON HIGH (normal power mode)
+ * CXDNFC_WAKE_CTL(1): PON LOW (low power mode)
+ * CXDNFC_WAKE_RST():  assert XRST
+ */
+#define CXDNFC_POWER_CTL		_IO(CXDNFC_MAGIC, 0x01)
+#define CXDNFC_WAKE_CTL			_IO(CXDNFC_MAGIC, 0x02)
+#define CXDNFC_RST_CTL			_IO(CXDNFC_MAGIC, 0x03)
+
+#define CXDNFC_RST_ACTIVE 1            /* ActiveHi = 1, ActiveLow = 0 */
+
+struct cxd224x_platform_data {
+	unsigned int irq_gpio;
+	unsigned int en_gpio;
+	unsigned int wake_gpio;
+	unsigned int rst_gpio;
+};
+
+#endif
diff --git a/drivers/misc/carillon/main_module.c b/drivers/misc/carillon/main_module.c
new file mode 100644
index 000000000000..cb885f84d99d
--- /dev/null
+++ b/drivers/misc/carillon/main_module.c
@@ -0,0 +1,54 @@
+/* main_module.c
+ *
+ * Copyright (C) 2017 Sony Mobile Communications Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2, as
+ * published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ */
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+
+extern int bd7602_dev_init(void);
+extern void bd7602_dev_exit(void);
+extern int cxd224x_dev_init(void);
+extern void cxd224x_dev_exit(void);
+
+static int __init nfc_carillon_init(void)
+{
+	int ret;
+
+	pr_info("%s\n", __func__);
+
+	ret = bd7602_dev_init();
+	if (ret)
+		goto exit;
+
+	ret = cxd224x_dev_init();
+	if (ret)
+		goto exit_del_bd7602_driver;
+
+	return 0;
+
+exit_del_bd7602_driver:
+	bd7602_dev_exit();
+
+exit:
+	return ret;
+}
+module_init(nfc_carillon_init);
+
+static void __exit nfc_carillon_exit(void)
+{
+	pr_info("%s\n", __func__);
+
+	cxd224x_dev_exit();
+	bd7602_dev_exit();
+}
+module_exit(nfc_carillon_exit);
+
+MODULE_AUTHOR("Sony Mobile Communications Inc.");
+MODULE_DESCRIPTION("NFC Carillon's component driver");
+MODULE_LICENSE("GPL v2");
