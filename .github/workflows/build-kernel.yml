name: Build Kernel

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_DIR: /home/runner/.ccache_${{ matrix.devices.name }}
      CCACHE_MAXSIZE: 8G
    strategy:
      fail-fast: false
      matrix:
        devices:
          - name: xz2c_dcm
            config: tama_apollo_dcm_defconfig
          - name: xz2c
            config: tama_apollo_defconfig
    name: Build Kernel for ${{ matrix.devices.name }}
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Install Package
        run: sudo apt update && sudo apt install -y p7zip-full git ccache

      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: /home/runner/.ccache_${{ matrix.devices.name }}
          key: ccache-${{ runner.os }}-${{ github.ref }}-${{ matrix.devices.name }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ matrix.devices.name }}-
            ccache-${{ runner.os }}-

      - uses: actions/checkout@v5
        with:
          path: patch

      - name: Get Kernel Source Code
        uses: actions/checkout@v5
        with:
          repository: ShujathMohd/android_kernel_sony_sdm845
          ref: lineage-20
          path: kernel
      
      - name: Setup Cross-compile toolchain
        run: |
          mkdir -p toolchain
          cd toolchain
          wget -q https://github.com/Mandi-Sa/clang/releases/download/amd64-kernel-arm_static-22/llvm22.0.0-binutils2.44_amd64-kernel-arm_static-20250824.7z
          7za x llvm22.0.0-binutils2.44_amd64-kernel-arm_static-20250824.7z
          rm llvm22.0.0-binutils2.44_amd64-kernel-arm_static-20250824.7z
      
      - name: Set up SukiSU
        working-directory: kernel
        run: |
          echo DATE=$(date +%F) >> $GITHUB_ENV
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          cd ./KernelSU
          export KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10700)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      - name: Get SukiSU Patches
        uses: actions/checkout@v5
        with:
          repository: SukiSU-Ultra/SukiSU_patch
          path: sukisu_patch

      - name: Get susfs4ksu
        run: |
          git clone -b kernel-4.9 --depth=1 https://gitlab.com/simonpunk/susfs4ksu.git
          cp $GITHUB_WORKSPACE/susfs4ksu/kernel_patches/fs/* $GITHUB_WORKSPACE/kernel/fs/
          cp $GITHUB_WORKSPACE/susfs4ksu/kernel_patches/include/linux/* $GITHUB_WORKSPACE/kernel/include/linux/

      - name: Patch Kernel
        working-directory: kernel
        run: |
          patch -p1 < $GITHUB_WORKSPACE/patch/fix-build-error.patch
          patch -p1 < $GITHUB_WORKSPACE/patch/ksu-syscall-hooks.patch
          patch -p1 -F 3 < $GITHUB_WORKSPACE/susfs4ksu/kernel_patches/50_add_susfs_in_kernel-4.9.patch
          patch -p1 < $GITHUB_WORKSPACE/patch/susfs_upgrade_patch.patch

      - name: Add Kernel Build Configuration Settings
        working-directory: kernel/arch/arm64/configs
        run: |
          echo "CONFIG_KSU=y" >> ./${{ matrix.devices.config }}

          # Add VFS configuration settings
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./${{ matrix.devices.config }}
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./${{ matrix.devices.config }}
          
          # Add SUSFS configuration settings
          echo "CONFIG_KSU_SUSFS=y" >> ./${{ matrix.devices.config }}
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./${{ matrix.devices.config }}
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./${{ matrix.devices.config }}
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./${{ matrix.devices.config }}
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./${{ matrix.devices.config }}
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./${{ matrix.devices.config }}
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./${{ matrix.devices.config }}
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./${{ matrix.devices.config }}
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./${{ matrix.devices.config }}
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./${{ matrix.devices.config }}
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./${{ matrix.devices.config }}
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./${{ matrix.devices.config }}
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./${{ matrix.devices.config }}
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./${{ matrix.devices.config }}
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./${{ matrix.devices.config }}

          # Add BBR
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./${{ matrix.devices.config }}
          echo "CONFIG_TCP_CONG_BBR=y" >> ./${{ matrix.devices.config }}
          echo "CONFIG_NET_SCH_FQ=y" >> ./${{ matrix.devices.config }}
          echo "CONFIG_TCP_CONG_BIC=n" >> ./${{ matrix.devices.config }}
          echo "CONFIG_TCP_CONG_CUBIC=n" >> ./${{ matrix.devices.config }}
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./${{ matrix.devices.config }}
          echo "CONFIG_TCP_CONG_HTCP=n" >> ./${{ matrix.devices.config }}
          echo "CONFIG_DEFAULT_TCP_CONG=bbr" >> ./${{ matrix.devices.config }}
      
      - name: Build Kernel for ${{ matrix.devices.name }}
        working-directory: kernel
        env:
          args: |+
            LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu-
            CROSS_COMPILE_ARM32=arm-linux-gnueabi- CROSS_COMPILE_COMPAT=arm-linux-gnueabi-
            CC=clang LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2 KCFLAGS_PERF+=-O3
        run: |
          export KBUILD_BUILD_TIMESTAMP=$(date)
          export PATH=/usr/lib/ccache:$GITHUB_WORKSPACE/toolchain/bin:$PATH
          make -j$(nproc --all) ${args} ${{ matrix.devices.config }} all
      
      - name: Get AnyKernel3
        uses: actions/checkout@v5
        with:
          repository: Kernel-SU/AnyKernel3
          path: AnyKernel3
      
      - name: Make AnyKernel3
        run: |
          rm -rf ./AnyKernel3/.git
          rm -rf ./AnyKernel3/push.sh
          ls $GITHUB_WORKSPACE/kernel/out/arch/arm64/boot/
          cp $GITHUB_WORKSPACE/kernel/out/arch/arm64/boot/Image.gz-dtb $GITHUB_WORKSPACE/AnyKernel3
      
      - name: Pack kernel image with AnyKernel3
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.devices.name }}_SukiSU_${{ env.KSUVER }}
          path: AnyKernel3
